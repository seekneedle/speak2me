name: Deploy to Nginx Server

on:
  push:
    branches: [ "main" ]  # Trigger on push to main branch
  workflow_dispatch:      # Allow manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'  # Use the Node.js version your project requires
        cache: 'npm'
    
    - name: Install Dependencies
      run: |
        npm config set registry https://registry.npmjs.org/
        npm cache clean --force
        echo "Current working directory:"
        pwd
        echo "Node.js version:"
        node --version
        echo "npm version:"
        npm --version
        echo "Listing package.json contents:"
        cat package.json
        echo "Running npm install with exact versions..."
        npm install --save-exact --verbose
        echo "Verifying package-lock.json..."
        npm ls
        echo "npm install completed successfully"
    
    - name: Build Project
      run: npm run build
    
    - name: Check Build Output
      run: |
        ls -la ${{ github.workspace }}/dist
        if [ ! -d "${{ github.workspace }}/dist" ]; then
          echo "Build output directory does not exist"
          exit 1
        fi    

    - name: Deploy to Nginx Server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_IP }}
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Disable host key checking      
          #mkdir -p ~/.ssh
          #touch ~/.ssh/known_hosts
          #ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts

          # Remove existing deployment
          #rm -rf /var/www/speak2me/*
          
          # Create deployment directory if it doesn't exist
          #mkdir -p /var/www/speak2me

          # Prepare SSH key
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
            
          # Create and secure the SSH key file
          echo "${{ secrets.SERVER_SSH_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          
          # Copy new build files
          scp -i ~/.ssh/deploy_key -r ${{ github.workspace }}/dist/* ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }}:/var/www/speak2me/
          
          # Clean up key file
          rm -f ~/.ssh/deploy_key  

          # Set correct permissions
          #sudo chown -R www-data:www-data /var/www/speak2me
          
          # Restart nginx (if needed)
          #sudo systemctl restart nginx